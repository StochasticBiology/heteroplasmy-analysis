#   x[[i]] = read.table(paste(c("am-0.txt.graph.", i-1, ".txt"), collapse=""))
#   g[[i]] = graph_from_edgelist(as.matrix(x[[i]]), directed=F)
#   if (i==n-1) {
#     g[[i]] = graph_from_edgelist(as.matrix(wtEL), directed=F)
#
#   }
# }
# setwd("C:/Users/kgi062/Desktop/mydata/code/AM-relabel")
library(igraph)
library(brainGraph)
set.seed(79)
# watts.strogatz.game generates graphs according to
# the Watts-Strogatz model (good amount of clustering
# and short diameters  at the same time). Fixed number
# of nodes and number of edges
wt=watts.strogatz.game(1, 480, 2, 0.2,multiple = F)#sample_smallworld
#wtEdgelist is the edgelist form of the graph (in case we want to store it for further analysis)
wtEdgelist=as_edgelist(wt,names = TRUE)
# wt=rgraph_ws(250,4,0.1)#library(netdiffuseR)
par(mfrow=c(2,2))
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4)))
hist(degree(wt))
# gorder(wt)
# gsize(wt)
print(efficiency(wt, type="global"))
#Newman variation Watts–Strogatz
# Newman, M. E. J., 2000, “Models of the small world,” J. Stat.Phys. 101, 819.
#Newman, M. E. J., S. H. Strogatz, and D. J. Watts, 2001, “Random graphs with arbitrary degree distributions and their applications,” Phys. Rev. E 64, 026118.
g <- graph.lattice(length=480, dim=1, circular=TRUE)
g2 <- erdos.renyi.game(480, 4/480)
g3 <- g %u% g2
g3 <- simplify(g3)
wt=g3
plot(wt,vertex.label=NA,vertex.size=0)
hist(degree(wt))
print(efficiency(wt, type="global"))
# for(i in 1:n)
# {
#   x[[i]] = read.table(paste(c("am-0.txt.graph.", i-1, ".txt"), collapse=""))
#   g[[i]] = graph_from_edgelist(as.matrix(x[[i]]), directed=F)
#   if (i==n-1) {
#     g[[i]] = graph_from_edgelist(as.matrix(wtEL), directed=F)
#
#   }
# }
# setwd("C:/Users/kgi062/Desktop/mydata/code/AM-relabel")
library(igraph)
library(brainGraph)
set.seed(79)
# watts.strogatz.game generates graphs according to
# the Watts-Strogatz model (good amount of clustering
# and short diameters  at the same time). Fixed number
# of nodes and number of edges
wt=watts.strogatz.game(1, 480, 2, 0.2,multiple = F)#sample_smallworld
#wtEdgelist is the edgelist form of the graph (in case we want to store it for further analysis)
wtEdgelist=as_edgelist(wt,names = TRUE)
# wt=rgraph_ws(250,4,0.1)#library(netdiffuseR)
par(mfrow=c(2,2))
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4)))
hist(degree(wt))
# gorder(wt)
# gsize(wt)
print(efficiency(wt, type="global"))
#Newman variation Watts–Strogatz
# Newman, M. E. J., 2000, “Models of the small world,” J. Stat.Phys. 101, 819.
#Newman, M. E. J., S. H. Strogatz, and D. J. Watts, 2001, “Random graphs with arbitrary degree distributions and their applications,” Phys. Rev. E 64, 026118.
g <- graph.lattice(length=480, dim=1, circular=TRUE)
g2 <- erdos.renyi.game(480, 4/480)
g3 <- g %u% g2
g3 <- simplify(g3)
wt=g3
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Newman Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4)))
hist(degree(wt))
print(efficiency(wt, type="global"))
# for(i in 1:n)
# {
#   x[[i]] = read.table(paste(c("am-0.txt.graph.", i-1, ".txt"), collapse=""))
#   g[[i]] = graph_from_edgelist(as.matrix(x[[i]]), directed=F)
#   if (i==n-1) {
#     g[[i]] = graph_from_edgelist(as.matrix(wtEL), directed=F)
#
#   }
# }
# setwd("C:/Users/kgi062/Desktop/mydata/code/AM-relabel")
library(igraph)
library(brainGraph)
set.seed(79)
# watts.strogatz.game generates graphs according to
# the Watts-Strogatz model (good amount of clustering
# and short diameters  at the same time). Fixed number
# of nodes and number of edges
wt=watts.strogatz.game(1, 480, 2, 0.2,multiple = F)#sample_smallworld
#wtEdgelist is the edgelist form of the graph (in case we want to store it for further analysis)
wtEdgelist=as_edgelist(wt,names = TRUE)
# wt=rgraph_ws(250,4,0.1)#library(netdiffuseR)
par(mfrow=c(2,2))
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4)))
hist(degree(wt))
# gorder(wt)
# gsize(wt)
print(efficiency(wt, type="global"))
#Newman variation Watts–Strogatz
# Newman, M. E. J., 2000, “Models of the small world,” J. Stat.Phys. 101, 819.
#Newman, M. E. J., S. H. Strogatz, and D. J. Watts, 2001, “Random graphs with arbitrary degree distributions and their applications,” Phys. Rev. E 64, 026118.
g <- graph.lattice(length=480, dim=1, circular=TRUE)
g2 <- erdos.renyi.game(480, 2/480)
g3 <- g %u% g2
g3 <- simplify(g3)
wt=g3
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Newman Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4)))
hist(degree(wt))
print(efficiency(wt, type="global"))
# for(i in 1:n)
# {
#   x[[i]] = read.table(paste(c("am-0.txt.graph.", i-1, ".txt"), collapse=""))
#   g[[i]] = graph_from_edgelist(as.matrix(x[[i]]), directed=F)
#   if (i==n-1) {
#     g[[i]] = graph_from_edgelist(as.matrix(wtEL), directed=F)
#
#   }
# }
# setwd("C:/Users/kgi062/Desktop/mydata/code/AM-relabel")
library(igraph)
library(brainGraph)
set.seed(79)
# watts.strogatz.game generates graphs according to
# the Watts-Strogatz model (good amount of clustering
# and short diameters  at the same time). Fixed number
# of nodes and number of edges
wt=watts.strogatz.game(1, 480, 2, 0.2,multiple = F)#sample_smallworld
#wtEdgelist is the edgelist form of the graph (in case we want to store it for further analysis)
wtEdgelist=as_edgelist(wt,names = TRUE)
# wt=rgraph_ws(250,4,0.1)#library(netdiffuseR)
par(mfrow=c(2,2))
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4)))
hist(degree(wt))
# gorder(wt)
# gsize(wt)
print(efficiency(wt, type="global"))
#Newman variation Watts–Strogatz
# Newman, M. E. J., 2000, “Models of the small world,” J. Stat.Phys. 101, 819.
#Newman, M. E. J., S. H. Strogatz, and D. J. Watts, 2001, “Random graphs with arbitrary degree distributions and their applications,” Phys. Rev. E 64, 026118.
g <- graph.lattice(length=480, dim=1, circular=TRUE)
g2 <- erdos.renyi.game(480, 2/480)
g3 <- g %u% g2
g3 <- simplify(g3)
wt=g3
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Newman Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4)))
hist(degree(wt))
print(efficiency(wt, type="global"))
# for(i in 1:n)
# {
#   x[[i]] = read.table(paste(c("am-0.txt.graph.", i-1, ".txt"), collapse=""))
#   g[[i]] = graph_from_edgelist(as.matrix(x[[i]]), directed=F)
#   if (i==n-1) {
#     g[[i]] = graph_from_edgelist(as.matrix(wtEL), directed=F)
#
#   }
# }
# setwd("C:/Users/kgi062/Desktop/mydata/code/AM-relabel")
library(igraph)
library(brainGraph)
set.seed(79)
# watts.strogatz.game generates graphs according to
# the Watts-Strogatz model (good amount of clustering
# and short diameters  at the same time). Fixed number
# of nodes and number of edges
wt=watts.strogatz.game(1, 480, 2, 0.2,multiple = F)#sample_smallworld
#wtEdgelist is the edgelist form of the graph (in case we want to store it for further analysis)
wtEdgelist=as_edgelist(wt,names = TRUE)
# wt=rgraph_ws(250,4,0.1)#library(netdiffuseR)
par(mfrow=c(2,2))
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4)))
hist(degree(wt))
# gorder(wt)
# gsize(wt)
print(efficiency(wt, type="global"))
#Newman variation Watts–Strogatz
# Newman, M. E. J., 2000, “Models of the small world,” J. Stat.Phys. 101, 819.
#Newman, M. E. J., S. H. Strogatz, and D. J. Watts, 2001, “Random graphs with arbitrary degree distributions and their applications,” Phys. Rev. E 64, 026118.
g <- graph.lattice(length=480, dim=1, circular=TRUE)
g2 <- erdos.renyi.game(480, 2/480)
g3 <- g %u% g2
g3 <- simplify(g3)
wt=g3
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Newman Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4),collapse=""))
hist(degree(wt))
print(efficiency(wt, type="global"))
# for(i in 1:n)
# {
#   x[[i]] = read.table(paste(c("am-0.txt.graph.", i-1, ".txt"), collapse=""))
#   g[[i]] = graph_from_edgelist(as.matrix(x[[i]]), directed=F)
#   if (i==n-1) {
#     g[[i]] = graph_from_edgelist(as.matrix(wtEL), directed=F)
#
#   }
# }
# setwd("C:/Users/kgi062/Desktop/mydata/code/AM-relabel")
library(igraph)
library(brainGraph)
set.seed(79)
# watts.strogatz.game generates graphs according to
# the Watts-Strogatz model (good amount of clustering
# and short diameters  at the same time). Fixed number
# of nodes and number of edges
wt=watts.strogatz.game(1, 480, 2, 0.2,multiple = F)#sample_smallworld
#wtEdgelist is the edgelist form of the graph (in case we want to store it for further analysis)
wtEdgelist=as_edgelist(wt,names = TRUE)
# wt=rgraph_ws(250,4,0.1)#library(netdiffuseR)
par(mfrow=c(2,2))
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4)))
hist(degree(wt))
# gorder(wt)
# gsize(wt)
print(efficiency(wt, type="global"))
#Newman variation Watts–Strogatz
# Newman, M. E. J., 2000, “Models of the small world,” J. Stat.Phys. 101, 819.
#Newman, M. E. J., S. H. Strogatz, and D. J. Watts, 2001, “Random graphs with arbitrary degree distributions and their applications,” Phys. Rev. E 64, 026118.
g <- graph.lattice(length=480, dim=1, circular=TRUE)
g2 <- erdos.renyi.game(480, 2/480)
g3 <- g %u% g2
g3 <- simplify(g3)
wt=g3
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Newman Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4),collapse=" "))
hist(degree(wt))
print(efficiency(wt, type="global"))
# for(i in 1:n)
# {
#   x[[i]] = read.table(paste(c("am-0.txt.graph.", i-1, ".txt"), collapse=""))
#   g[[i]] = graph_from_edgelist(as.matrix(x[[i]]), directed=F)
#   if (i==n-1) {
#     g[[i]] = graph_from_edgelist(as.matrix(wtEL), directed=F)
#
#   }
# }
# setwd("C:/Users/kgi062/Desktop/mydata/code/AM-relabel")
library(igraph)
library(brainGraph)
set.seed(79)
# watts.strogatz.game generates graphs according to
# the Watts-Strogatz model (good amount of clustering
# and short diameters  at the same time). Fixed number
# of nodes and number of edges
wt=watts.strogatz.game(1, 480, 2, 0.2,multiple = F)#sample_smallworld
#wtEdgelist is the edgelist form of the graph (in case we want to store it for further analysis)
wtEdgelist=as_edgelist(wt,names = TRUE)
# wt=rgraph_ws(250,4,0.1)#library(netdiffuseR)
par(mfrow=c(2,2))
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4)))
hist(degree(wt))
# gorder(wt)
# gsize(wt)
print(efficiency(wt, type="global"))
#Newman variation Watts–Strogatz
# Newman, M. E. J., 2000, “Models of the small world,” J. Stat.Phys. 101, 819.
#Newman, M. E. J., S. H. Strogatz, and D. J. Watts, 2001, “Random graphs with arbitrary degree distributions and their applications,” Phys. Rev. E 64, 026118.
g <- graph.lattice(length=480, dim=1, circular=TRUE)
g2 <- erdos.renyi.game(480, 2/480)
g3 <- g %u% g2
g3 <- simplify(g3)
wt=g3
plot(wt,vertex.label=NA,vertex.size=0,main=
paste("Newman Watts-Strogatz","\n","n=",gorder(wt)," e=",gsize(wt),"\n","nu=",format(efficiency(wt, type="global"),digits=4),collapse=""))
hist(degree(wt))
print(efficiency(wt, type="global"))
# for(i in 1:n)
# {
#   x[[i]] = read.table(paste(c("am-0.txt.graph.", i-1, ".txt"), collapse=""))
#   g[[i]] = graph_from_edgelist(as.matrix(x[[i]]), directed=F)
#   if (i==n-1) {
#     g[[i]] = graph_from_edgelist(as.matrix(wtEL), directed=F)
#
#   }
# }
library(rscopus)
library(citecorp)
library(stringr)
library(fulltext)# for dois
library(rcrossref)
library(data.table)
set_api_key("5193a60cddd5d9a2bf250ab12eeb2a04")
#8f6a5c25e30792bdc306f9fbc485156e
# set_api_key("e5852704561e4ca884841c7a1cf58f44")#Microsoft
# Sys.setenv(MICROSOFT_ACADEMIC_KEY= "e5852704561e4ca884841c7a1cf58f44")
Sys.setenv( Elsevier_API
= "5193a60cddd5d9a2bf250ab12eeb2a04")
# res = scopus_search(query = "ISSN ( 0028-0836 )  AND  ( LIMIT-TO ( PUBYEAR ,  2015 )  OR  LIMIT-TO ( PUBYEAR ,  2014 )  OR  LIMIT-TO ( PUBYEAR ,  2013 )  OR  LIMIT-TO ( PUBYEAR ,  2012 )  OR  LIMIT-TO ( PUBYEAR ,  2011 )  OR  LIMIT-TO ( PUBYEAR ,  2010 ) ) ", max_count = 20,
#                     count = 10)
# res = scopus_search(query = "ISSN%28(0028-0836%29+AND+%28LIMIT-TO%28PUBYEAR,2015%29+OR+LIMIT-TO%28PUBYEAR,2014%29", max_count = 20,
#                     count = 10)
# res = scopus_search(query = "ISSN%280028-0836%29")
res = scopus_search(query = "issn(0028-0836)",date="2010", max_count = 20000,
count = 25)
res = scopus_search(query = "issn(0028-0836)",date="2010", max_count = 20000,
count = 25)
res = scopus_search(query = "issn(0028-0836)",api_key =5193a60cddd5d9a2bf250ab12eeb2a04,date="2010", max_count = 20000,
count = 25)
res = scopus_search(query = "issn(0028-0836)",api_key =5193a60cddd5d9a2bf250ab12eeb2a04,date="2010", max_count = 20000,
count = 25)
res = scopus_search(query = "issn(0028-0836)",api_key ="5193a60cddd5d9a2bf250ab12eeb2a04",date="2010", max_count = 20000,
count = 25)
scopus_search(query = "AUTH(Pieter van Dokkum)", max_count = 20000,
+                 count = 25,key = "8f6a5c25e30792bdc306f9fbc485156e")
scopus_search(query = "AUTH(Pieter van Dokkum)", max_count = 20000,
+                 count = 25)
scopus_search(query = "AUTH(Pieter van Dokkum)", max_count = 200,
+                 count = 2)
res = scopus_search(query = "issn(0028-0836)",date="2010", max_count = 20000,
count = 25)
res = scopus_search(query = "issn(0028-0836)",date="2010", max_count = 200,
count = 2)
res = scopus_search(query = "issn(0028-0836)",date="2010", max_count = 200,
count = 2,api_key="5193a60cddd5d9a2bf250ab12eeb2a04")
= affiliation_retrieval("60006183", identifier = "affiliation_id",
verbose = FALSE)
= affiliation_retrieval("60006183", identifier = "affiliation_id",verbose = FALSE)
affiliation_retrieval("60006183", identifier = "affiliation_id",
affiliation_retrieval("60006183", identifier = "affiliation_id",verbose = FALSE)
x=affiliation_retrieval("60006183", identifier = "affiliation_id",verbose = FALSE)
x
x=scopus_search(query = "AUTH(Pieter van Dokkum)", max_count = 20000,
+                 count = 25,key = "8f6a5c25e30792bdc306f9fbc485156e")
x=scopus_search(query = "AUTH(Pieter van Dokkum)", max_count = 20000,count = 25,key = "8f6a5c25e30792bdc306f9fbc485156e")
x
x=affiliation_retrieval("60006183", identifier = "affiliation_id",verbose = FALSE)
http_proxy=http:/proxy.ionio.gr/
http_proxy=http://proxy.ionio.gr/
http_proxy=http://proxy.ionio.gr
http_proxy=proxy.ionio.gr
?http_proxy
install.packages("http_proxy")
install.packages("RCurl")
install.packages("httr")
install.packages("httr")
library(httr)
set_config(use_proxy(url="proxy.ionio.gr",port=3128, username="c11gian", password="1SNmi2"))
x=affiliation_retrieval("60006183", identifier = "affiliation_id",verbose = FALSE)
library(rscopus)
library(citecorp)
library(stringr)
library(fulltext)# for dois
library(rcrossref)
library(data.table)
x=affiliation_retrieval("60006183", identifier = "affiliation_id",verbose = FALSE)
x
res = scopus_search(query = "issn(0028-0836)",date="2010", max_count = 20000,
count = 25)
set_api_key("5193a60cddd5d9a2bf250ab12eeb2a04")
res = scopus_search(query = "issn(0028-0836)",date="2010", max_count = 20000,
count = 25)
res = scopus_search(query = "ISSN(0028-0836)",date="2010", max_count = 20000,
count = 25)
rscopus::is_elsevier_authorized()
is_elsevier_authorized()
library(rscopus)
library(rscopus)
is_elsevier_authorized()
?scopus_search
detach("package:fulltext", unload = TRUE)
res = scopus_search(query = "issn(0028-0836)",date="2010", max_count = 20000,
count = 25)
View(res)
x=affiliation_retrieval("60006183", identifier = "eid",verbose = FALSE)
View(x)
res[[29]}
res[[29]]
res$entries$
res$entries[[29]]$eid
x=affiliation_retrieval("2-s2.0-78650816688", identifier = "eid",verbose = FALSE)
View(x)
x=affiliation_retrieval("2-s2.0-78650816688", identifier = "eid")
x
x=affiliation_retrieval("2-s2.0-78650816688", identifier = "eid",verbose = FALSE)
res = scopus_search(query = "issn(0028-0836)",date="2010", max_count = 30,
count = 25,view = "FULL")
res = scopus_search(query = "issn(0028-0836)",date="2010", max_count = 30,
count = 25,view = "COMPLETE")
View(res)
?as.bayesboot
install.packages("fastnet")
library(fastnet)
x <- net.ring.lattice(12,4)
draw.net(x)
x <- net.caveman(50, 20) #using ncores by default
draw.net(x)
hist(degree(x))
library(igraph)
hist(degree(x))
library(igraph)
to.igraph(x)
hist(degree(x))
x=to.igraph(x)
hist(degree(x))
gorder(x)
gsize(x)
x <- net.caveman(40, 10) #using ncores by default
x=to.igraph(x)
gorder(x)
gsize(x)
x <- net.caveman(10, 45) #using ncores by default
x=to.igraph(x)
hist(degree(x))
gsize(x)
x <- net.caveman(20, 20) #using ncores by default
plot(x)
x=to.igraph(x)
plot(x)
library("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
setwd("C:/Users/kgi062/Desktop/mydata/code/heteroplasmy")
readHeteroplasmyData <- function(nameD="HB") {
# return a new vector containing the mouse data
if (nameD=="HB") {
mouseData <- read.table("HB oocyte data.txt", sep="\t",header=T)
mouseData=mouseData[,-c(1,2)]
mouseData=mouseData[-c(1:11),]
mouseData=mouseData[which(mouseData[,]!=""),]
mouseData[, ] <- sapply(mouseData[, ], as.numeric)
}else if(nameD=="LE"){
mouseData <- read.table("LE oocyte data.txt", sep="\t",header=T)
mouseData=mouseData[,-1]
mouseData=mouseData[-c(1:10),]
mouseData=mouseData[which(mouseData[,]!=""),]
mouseData[, ] <- sapply(mouseData[, ], as.numeric)
}else{
mouseData=NULL
print("wrong input, please use HB or LE")
}
return(mouseData)
}
HBdata=readHeteroplasmyData("HB")
LEdata=readHeteroplasmyData("LE")
save(HBdata, file = "HBdata.rda")
save(LEdata, file = "LEdata.rda")
document()
document()
?document
library("devtools")
document()
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
install.packages("usethis")
library("devtools")
version
library(roxygen2)
document()
setwd("C:/Users/kgi062/Desktop/mydata/code/heteroplasmy/heteroplasmyVar")
document()
library("devtools")
install.packages("rlang")
install.packages("rlang")
library("devtools")
library(installr)
install.packages("installr")
library(installr)
updateR()
readHeteroplasmyData <- function(nameD="HB") {
# return a new vector containing the mouse data
if (nameD=="HB") {
mouseData <- read.table("HB oocyte data.txt", sep="\t",header=T)
mouseData=mouseData[,-c(1,2)]
mouseData=mouseData[-c(1:11),]
mouseData=mouseData[which(mouseData[,]!=""),]
mouseData[, ] <- sapply(mouseData[, ], as.numeric)
}else if(nameD=="LE"){
mouseData <- read.table("LE oocyte data.txt", sep="\t",header=T)
mouseData=mouseData[,-1]
mouseData=mouseData[-c(1:10),]
mouseData=mouseData[which(mouseData[,]!=""),]
mouseData[, ] <- sapply(mouseData[, ], as.numeric)
}else{
mouseData=NULL
print("wrong input, please use HB or LE")
}
return(mouseData)
}
install.packages("devtools")
install.packages("devtools")
library(devtools)
document*()
document()
install.packages(c("ape", "BiocManager", "data.table", "data.tree", "dplyr", "ggplot2", "igraph", "nlme", "phangorn", "phytools", "rmarkdown", "RRphylo", "scholar", "stringi", "taxize", "tibble", "WikidataR"))
library(devtools)
document()
setwd("C:/Users/kgi062/Desktop/mydata/code/heteroplasmy/heteroplasmyVar")
document()
setwd("C:/Users/kgi062/Desktop/mydata/code/heteroplasmy")
document()
setwd("C:/Users/kgi062/Desktop/mydata/code/heteroplasmy/heteroplasmyVar/heteroplasmy")
document()
build_manual()
document()
build_manual()
